imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    serializer:
      enable_annotations: true
      name_converter: 'serializer.name_converter.camel_case_to_snake_case'
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: false
        mappings:
          AppBundle:
                mapping:  true
                type:     annotation
                dir:      "%kernel.root_dir%/../src/AppBundle/Entity"
                prefix:   AppBundle\Entity
                is_bundle: false

old_sound_rabbit_mq:
    connections:
        default:
            host:     "%rabbitmq.host%"
            port:     "%rabbitmq.port%"
            user:     "%rabbitmq.user%"
            password: "%rabbitmq.password%"
            vhost:    "%rabbitmq.vhost%"
            lazy:     false
    consumers:
        user_balance_transaction:
            connection:       default
            exchange_options: {name: 'user_balance_transaction', type: 'fanout'}
            queue_options:
              name: 'user_balance_transaction'
            callback: service.user_balance_transaction.consumer
    producers:
        user_balance_transaction:
            connection: default
            exchange_options: {name: 'user_balance_transaction', type: 'fanout'}
        user_balance_transaction_finished:
            connection: default
            exchange_options: {name: 'user_balance_transaction_finished', type: 'fanout'}
